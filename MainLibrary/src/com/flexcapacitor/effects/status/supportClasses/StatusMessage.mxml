<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 
		 implements="com.flexcapacitor.effects.status.supportClasses.IStatusMessage"
		 addedToStage="group1_addedToStageHandler(event)"
		 mouseEnabledWhereTransparent="true"
		 creationCompleteEffect="{fadeEffect}"
		 width="420" 
		 >
	
	<!-- 
	- title and showBusyIndicator not implemented in this case
	- dispatches close event after fade out
	-->
	
	<s:states>
		<s:State name="withBusyIndicator"/>
		<s:State name="withoutBusyIndicator"/>
	</s:states>
	
	<s:BorderContainer id="container" 
					   horizontalCenter="0"
					   minWidth="10" 
					   minHeight="10"
					   backgroundColor="0x333333" 
					   maxWidth="{width}" 
					   borderColor="0xffffff" 
					   borderWeight="2" 
					   cornerRadius="10" 
					   color="#ECECEC" >
		
		<s:layout>
			<s:HorizontalLayout paddingBottom="15" paddingTop="15" verticalAlign="middle"
								paddingLeft="15" paddingRight="15" gap="20"/>
		</s:layout>
		
		<!-- only available in mobile
		<s:BusyIndicator id="busyIndicator" 
						 width="50" height="50" 
						 includeIn="withBusyIndicator" 
						 symbolColor="#ffffff"/>-->
		
		<s:Label id="label" 
				 maxDisplayedLines="6" 
				 width="100%" 
				 textAlign="{textAlignment}"
				 fontSize="24" 
				 fontWeight="normal" 
				 text="{message}"/>
	</s:BorderContainer>
	
	<fx:Declarations>
		<s:Sequence id="fadeEffect" 
					effectEnd="fadeEffect_effectEndHandler(event)" 
					target="{this}">
			<s:Fade alphaFrom="0" alphaTo="1" duration="{fadeInDuration}"/>
			<s:Pause duration="{duration-fadeInDuration*2}"/>
			<s:Fade alphaFrom="1" alphaTo="0" duration="{fadeInDuration}"/>
		</s:Sequence>
	</fx:Declarations>
	
	<!--- Code -->
	<fx:Script>
		<![CDATA[
			import mx.events.EffectEvent;
			
			private var _title:String;
			
			private var _message:String;
			
			private var _duration:int			= 1000;
			
			[Bindable]
			public function get duration():int {
				return _duration;
			}

			public function set duration(value:int):void {
				if (value<1) value = 1;
				_duration = value;
			}
			
			private var _fadeInDuration:int			= 250;
			
			[Bindable]
			public function get fadeInDuration():int {
				return _fadeInDuration;
			}

			public function set fadeInDuration(value:int):void {
				if (value<1) value = 1;
				_fadeInDuration = value;
			}

			[Bindable]
			public function get title():String {
				return _title;
			}

			public function set title(value:String):void {
				_title = value;
			}

			[Bindable]
			public function get message():String {
				return _message;
			}

			public function set message(value:String):void {
				_message = value;
			}

			protected function group1_addedToStageHandler(event:Event):void {
				maxWidth = parent.width;
				width = parent.width;
			}
			
			private var _textAlignment:String = "left";

			[Bindable]
			public function get textAlignment():String {
				return _textAlignment;
			}

			public function set textAlignment(value:String):void {
				_textAlignment = value;
			}

			
			private var _showBusyIndicator:Boolean;
			
			public function get showBusyIndicator():Boolean { return _showBusyIndicator; }
			
			public function set showBusyIndicator(value:Boolean):void {
				_showBusyIndicator = value;
				currentState = value ? "withBusyIndicator" : "withoutBusyIndicator";
			}
			
			protected function fadeEffect_effectEndHandler(event:EffectEvent):void {
				dispatchEvent(new Event(Event.CLOSE));
			}
			
		]]>
	</fx:Script>
	
</s:Group>