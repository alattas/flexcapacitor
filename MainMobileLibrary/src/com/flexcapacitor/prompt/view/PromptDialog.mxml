<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="420" height="300" 
		 implements="com.flexcapacitor.prompt.supportClasses.IPrompt">
	
	<fx:Metadata>
		[Event(name="prompt", type="com.flexcapacitor.prompt.supportClasses.PromptEvent")]
	</fx:Metadata>
	
	
	<!-- States are used to show or hide the buttons -->
	<s:states>
		<s:State name="ok"/>
		<s:State name="okCancel"/>
		<s:State name="yesNo"/>
		<s:State name="none"/>
	</s:states>
	
	
	<s:BorderContainer backgroundColor="0x333333" width="100%" borderColor="0xffffff" borderWeight="4" 
					   cornerRadius="10" color="#ECECEC"
					   click.none="close()">
		<s:VGroup width="100%">
			
			<s:HGroup width="100%" gap="15" paddingBottom="10" paddingLeft="15" paddingRight="15" paddingTop="15">
				<s:BitmapImage source="{iconSource}" />
				<s:Label width="100%" fontSize="32" paddingTop="12" text="{title}"/>
			</s:HGroup>
			
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0x5b5b5b" weight="2"/>
				</s:stroke>
			</s:Line>
			
			<s:Label maxDisplayedLines="6" maxHeight="300" width="100%" 
					 fontSize="24" fontWeight="normal" paddingTop="12" paddingBottom="12" 
					 paddingLeft="15" paddingRight="15" text="{message}"/>
			
			<s:Group width="100%" height="70" excludeFrom="none">
				<s:BitmapImage source="{MainLibraryTheme.glossyButton}"/>
				<s:HGroup bottom="0" width="100%" height="100%" 
						  horizontalAlign="center" verticalAlign="middle" 
						  paddingLeft="10" paddingRight="10"
						  paddingBottom="5"
						  color="#484848"
						  >
					<s:Button id="okButton" 
							  includeIn="ok, okCancel"
							  label="OK" 
							  width.ok="100%" 
							  width.okCancel="50%" 
							  height="54" 
							  chromeColor="#ECECEC"
							  click="button_clickHandler(event)" 
							  />
					<s:Button id="cancelButton" 
							  includeIn="okCancel"
							  label="CANCEL" 
							  width="50%" 
							  height="54" 
							  chromeColor="#ECECEC" 
							  click="button_clickHandler(event)" 
							  />
					<s:Button id="yesButton" 
							  includeIn="yesNo"
							  label="YES" 
							  width="50%" 
							  height="54" 
							  chromeColor="#ECECEC" 
							  click="button_clickHandler(event)" 
							  />
					<s:Button id="noButton" 
							  includeIn="yesNo"
							  label="NO" 
							  width="50%" 
							  height="54" 
							  chromeColor="#ECECEC" 
							  click="button_clickHandler(event)" 
							  />
				</s:HGroup>
			</s:Group>
		</s:VGroup>
	</s:BorderContainer>
	
	<fx:Declarations>
		<s:Sequence>
			<s:Fade alphaFrom="0" alphaTo="1" />
			<s:Pause duration="{duration - 1000}"/>
			<s:Fade alphaFrom="1" alphaTo="0" />
		</s:Sequence>
	</fx:Declarations>
	
	<!--- Code -->
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.prompt.PromptManager;
			import com.flexcapacitor.prompt.supportClasses.PromptEvent;
			
			
			private var _icon:String		= "info";
			
			private var _title:String 		= "Information";
			
			private var _message:String		= "Default Message";
			
			private var _duration:int			= 2500;
			
			[Bindable]
			public function get duration():int {
				return _duration;
			}

			public function set duration(value:int):void {
				_duration = value;
			}

			[Bindable]
			public function get message():String {
				return _message;
			}

			public function set message(value:String):void {
				_message = value;
			}

			[Bindable]
			public function get title():String {
				return _title;
			}

			public function set title(value:String):void {
				_title = value;
			}

			[Bindable]
			public function get icon():String {
				return _icon;
			}

			public function set icon(value:String):void {
				_icon = value;
				iconSource = getIconClass(value);
			}

			[Bindable]
			public function set messageType(value:String):void {
				_messageType = value;
			}
			
			public function get messageType():String {
				return _messageType;
			}
			
			[Bindable]
			public function get buttons():String {
				return _buttons;
			}
			
			private var _buttons:String;
			private var _messageType:String;
			
			[Bindable]
			private var iconSource:Class;
			
			public function set buttons(value:String):void  {
				_buttons = value;
				
				// set view to the state of the same name
				currentState = _buttons;
			}
			
			/**
			 * Get the icon image by name
			 * */
			protected static function getIconClass(name:String):Class {
				
				switch(name) {
					
					case PromptManager.ADD: {
						return MainLibraryTheme.addClass;
						break;
					}
					case PromptManager.ALERT: {
						return MainLibraryTheme.alertClass;
						break;
					}
					case PromptManager.CANCEL: {
						return MainLibraryTheme.cancelClass;
						break;
					}
					case PromptManager.CLEAR: {
						return MainLibraryTheme.clearClass;
						break;
					}
					case PromptManager.CLOSE: {
						return MainLibraryTheme.closeClass;
						break;
					}
					case PromptManager.DELETE: {
						return MainLibraryTheme.deleteClass;
						break;
					}
					case PromptManager.EDIT: {
						return MainLibraryTheme.editClass;
						break;
					}
					case PromptManager.HELP: {
						return MainLibraryTheme.helpClass;
						break;
					}
					case PromptManager.INFO: {
						return MainLibraryTheme.infoClass;
						break;
					}
					case PromptManager.MORE: {
						return MainLibraryTheme.moreClass;
						break;
					}
					case PromptManager.SAVE: {
						return MainLibraryTheme.saveClass;
						break;
					}
					default: {
						return MainLibraryTheme.infoClass;
						break;
					}
				}
				
				return MainLibraryTheme.infoClass;
			}
			
			protected function button_clickHandler(event:MouseEvent):void {
				var messageEvent:PromptEvent = new PromptEvent(PromptEvent.PROMPT);
				
				if (event.currentTarget==okButton) 
					messageEvent.buttonPressed = PromptEvent.OK;
				if (event.currentTarget==noButton) 
					messageEvent.buttonPressed = PromptEvent.NO;
				if (event.currentTarget==yesButton) 
					messageEvent.buttonPressed = PromptEvent.YES;
				if (event.currentTarget==cancelButton) 
					messageEvent.buttonPressed = PromptEvent.CANCEL;
				
				dispatchEvent(messageEvent);
				close();
			}
			
			public function close():void {
				PromptManager.close(this);
			}
			
		]]>
	</fx:Script>
	
</s:Group>