<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:handlers="com.flexcapacitor.handlers.*" 
		 xmlns:file="com.flexcapacitor.effects.file.*" 
		 xmlns:core="com.flexcapacitor.effects.core.*" 
		 xmlns:status="com.flexcapacitor.effects.status.*" 
		 xmlns:settings="com.flexcapacitor.effects.settings.*" 
		 xmlns:collections="com.flexcapacitor.effects.collections.*" 
		 xmlns:display="com.flexcapacitor.effects.display.*" 
		 xmlns:list="com.flexcapacitor.effects.list.*" 
		 xmlns:open="com.flexcapacitor.effects.navigation.*"
		 >
	
	<fx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			
			public var so:SharedObject;
			
			protected function runButtons_clickHandler(event:MouseEvent):void {
				var result:Object = SharedObject.getLocal("test", "/");
				var so1:SharedObject;
				
				if (result is SharedObject) {
					so1 = result as SharedObject;
					so1.setProperty("testProperty",200);
					so1.flush();
					so = so1;
				}
				else {
					trace(ObjectUtil.toString(result));
				}
			}
		]]>
	</fx:Script>
	
	
	<fx:Declarations>

		
		<!-- GET SETTING -->
		
		<!-- CREATION COMPLETE - GET SAVED SETTINGS -->
		<handlers:EventHandler eventName="creationComplete">
			<core:PlayEffect effect="{getAllSettingsSequence}"/>
		</handlers:EventHandler>
		
		<handlers:EventHandler eventName="click" target="{moreInfoOnErrorsLabel}" >
			<open:OpenURL URL="http://www.actionscripterrors.com/?p=806" window="_blank" />
		</handlers:EventHandler>
		
		<!-- GET ALL SETTINGS -->
		<handlers:EventHandler target="{getAllSettingsButton}" eventName="click">
			<!--
			<core:IsPropertySet target="{groupNameInput}" targetPropertyName="text">
				<core:propertyNotSetEffect>
					<s:Sequence>
						<status:ShowStatusMessage message="Please enter a group name for the settings"/>
						<core:Cancel />
					</s:Sequence>
				</core:propertyNotSetEffect>
			</core:IsPropertySet>-->
			
			<s:Sequence id="getAllSettingsSequence">
				<settings:GetSettings id="getSettings" 
									  name="{settingNameInput.text}" 
									  localPath="{groupNameInput.text}"
									  allowNullName="true">
					<settings:valueNotSetEffect>
						<s:Sequence >
							<display:ShowElement target="{groupDoesNotExistLabel}"/>
							<core:SetAction target="{propertiesCollection}" 
											property="source"
											value="{[]}"
											/>
							<core:SetAction target="{settingValueTextarea}" 
											property="text"
											value=""
											/>
							<!--<status:ShowStatusMessage message="Path does not exist" duration="100"/>-->
							<!--<core:Cancel />-->
						</s:Sequence>
					</settings:valueNotSetEffect>
					<settings:valueSetEffect>
						<s:Sequence >
							<display:HideElement target="{groupDoesNotExistLabel}"/>
							<!--<status:ShowStatusMessage message="Setting exists"
													  location="bottom"
													  textAlignment="left"
													  />-->
							<core:CopyDataToTarget target="{settingValueTextarea}" 
												   targetPropertyName="text"
												   data="{getSettings.data}"
												   convertObjectToString="true"
												   />
						</s:Sequence>
					</settings:valueSetEffect>
					<settings:errorEffect>
						<s:Sequence >
							<!--<status:ShowStatusMessage message="Error getting settings"
													  location="bottom"/>-->
						
							<core:CopyDataToTarget target="{settingValueTextarea}" 
												   targetPropertyName="text"
												   data="{getSettings.errorEvent}"
												   convertObjectToString="true"
												   />
						</s:Sequence>
					</settings:errorEffect>
				</settings:GetSettings>
				
				<core:CopyPreviousToNext sourcePropertyName="properties"/>
				
				<core:CopyDataToTarget target="{propertiesCollection}" 
									   targetPropertyName="source"
									   />
			</s:Sequence>
			
		</handlers:EventHandler>
		
<settings:GetSettings id="settings" 
					  name="mySettings" >
	<settings:valueNotSetEffect>
		<status:ShowStatusMessage message="Setting does not contain any data"/>
	</settings:valueNotSetEffect>
	<settings:valueSetEffect>
		<status:ShowStatusMessage message="Setting exists" 
								  duration="1000" 
								  data="{settings.data}"/>
	</settings:valueSetEffect>
</settings:GetSettings>

		
		<!-- ADD NEW SETTING -->
		<handlers:EventHandler target="{addPropertyButton}" eventName="click">
			
			<core:IsPropertySet target="{propertyNameInput}" targetPropertyName="text">
				<core:propertyNotSetEffect>
					<s:Sequence>
						<status:ShowStatusMessage message="Please enter a name for the property"
												  />
						<core:Cancel />
					</s:Sequence>
				</core:propertyNotSetEffect>
				<core:propertySetEffect>
					<s:Sequence>
						<!--- In this example we are not setting the value here. We set it in the update value sequence -->
						<settings:SaveSetting id="saveSetting" name="{settingNameInput.text}" 
											  property="{propertyNameInput.text}"
											  localPath="{groupNameInput.text}"
											  >
							<settings:savedEffect>
								<s:Sequence>
									<!--<status:ShowStatusMessage message="Setting was added successfully"
															  data=""/>-->
									<core:PlayEffect effect="{getAllSettingsSequence}"/>
								</s:Sequence>
							</settings:savedEffect>
							<settings:pendingEffect>
								<status:ShowStatusMessage message="Setting will be added on exit"/>
							</settings:pendingEffect>
							<settings:errorEffect>
								<status:ShowStatusMessage message="An error occured when attempting to save!"
														  data="{saveSetting.errorEvent}"/>
							</settings:errorEffect>
						</settings:SaveSetting>
						
						<!--<core:SetAction target="{settingNameInput}" property="text" value=""/> 
						<core:SetAction target="{settingValueTextarea}" property="text" value=""/>-->
					</s:Sequence>
				</core:propertySetEffect>
			</core:IsPropertySet>
			
			<!--<core:IsPropertySet target="{groupNameInput}" targetPropertyName="text">
				<core:propertyNotSetEffect>
					<s:Sequence>
						<status:ShowStatusMessage message="Please enter a group name for the settings"/>
						<core:Cancel />
					</s:Sequence>
				</core:propertyNotSetEffect>
			</core:IsPropertySet>-->
			
			
		</handlers:EventHandler>
		
		
		<!-- UPDATED SAVED VALUE -->
		<handlers:EventHandler target="{removeSettingButton}" eventName="click">
			<settings:RemoveSetting id="removeSettings" 
									name="{settingNameInput.text}" 
									localPath="{groupNameInput.text}">
				<settings:pendingEffect>
					<status:ShowStatusMessage message="The current settings will be removed"/>
				</settings:pendingEffect>
				<settings:removedEffect>
					<status:ShowStatusMessage message="The current setting and it's properties were removed"/>
				</settings:removedEffect>
				<settings:errorEffect>
					<status:ShowStatusMessage message="An error occured when attempting to remove this setting"
											  data="{removeSettings.errorEvent}"/>
				</settings:errorEffect>
			</settings:RemoveSetting>
			<core:PlayEffect target="{getAllSettingsSequence}"/>
		</handlers:EventHandler>
		
		
		<!-- UPDATED SAVED VALUE -->
		<handlers:EventHandler target="{updateValueButton}" eventName="click">
			
			<core:IsPropertySet target="{settingsList}" targetPropertyName="selectedItem">
				<core:propertyNotSetEffect>
					<s:Sequence>
						<status:ShowStatusMessage message="Please add or select an item from the list"/>
					</s:Sequence>
				</core:propertyNotSetEffect>
				
				<core:propertySetEffect>
					<settings:SaveSetting id="saveSetting2" 
										  name="{settingNameInput.text}" 
										  property="{settingsList.selectedItem}" 
										  data="{settingValueTextarea.text}" 
										  localPath="{groupNameInput.text}">
						<settings:savedEffect>
							<s:Sequence>
								<status:ShowStatusMessage message="Value is was saved successfully" 
														  moveToNextEffectImmediately="false"/>
								<core:PlayEffect effect="{getAllSettingsSequence}"/>
							</s:Sequence>
						</settings:savedEffect>
						<settings:pendingEffect>
							<status:ShowStatusMessage message="Value will be saved on exit"/>
						</settings:pendingEffect>
						<settings:errorEffect>
							<status:ShowStatusMessage message="An error occured when attempting to save!"
													  data="{saveSetting2.data}"/>
						</settings:errorEffect>
					</settings:SaveSetting>
				</core:propertySetEffect>
			</core:IsPropertySet>
			
			
			
		</handlers:EventHandler>
		
		
		
		<!-- GROUP NAME CHANGE - GET ALL SETTINGS -->
		<handlers:EventHandler targets="{[settingNameInput, groupNameInput]}" 
							   eventName="change">
			
					<core:PlayEffect effect="{getAllSettingsSequence}"/>
			<!--<core:IsPropertySet target="{groupNameInput}" targetPropertyName="text">
				<core:propertySetEffect>
					<core:PlayEffect effect="{getAllSettingsSequence}"/>
				</core:propertySetEffect>
				<core:propertyNotSetEffect>
					<core:SetAction target="{propertiesCollection}" 
									property="source"
									value="{[]}"
									/>
				</core:propertyNotSetEffect>
			</core:IsPropertySet>-->
			
		</handlers:EventHandler>
		
		
		<!-- LIST ROW CHANGE - GET SELECTED SETTING -->
		<handlers:EventHandler target="{settingsList}" 
							   eventName="change">
			
			<list:GetSelectedItem target="{settingsList}"/>
			
			<core:CopyPreviousToNext targetPropertyName="property" />
			
			<settings:GetSetting name="{settingNameInput.text}" localPath="{groupNameInput.text}">
				<settings:valueNotSetEffect>
					<s:Sequence >
						<status:ShowStatusMessage message="There is no setting with that name"/>
					</s:Sequence>
				</settings:valueNotSetEffect>
			</settings:GetSetting>
			
			<core:CopyPreviousToNext />
			
			<core:CopyDataToTarget target="{settingValueTextarea}" targetPropertyName="text"/>
			
		</handlers:EventHandler>
		
		
		<s:ArrayCollection id="propertiesCollection"/>
	</fx:Declarations>
	
	
	
	<s:Group width="100%" height="100%" 
			 left="10" top="10" bottom="10">
		<s:layout>
			<s:VerticalLayout horizontalAlign="left" gap="12"/>
		</s:layout>
		
		<s:Label text="Gets or saves a value in the local cache (SharedObject)." 
				 color="#333333"
				 top="10" left="10"
				 fontSize="12">
		</s:Label>
		
		<s:Spacer height="10"/>
		
		
		<s:HGroup verticalAlign="middle" width="100%">
			
			<s:Label id="settingName"
					 text="Name:"
					 minWidth="60"
					 />
			
			<s:TextInput id="settingNameInput"
						 prompt="Enter name for setting. Required."
						 text="settings"
						 width="300"
						 />
			
			<s:Label id="groupNameLabel"
					 text="Path:"
					 />
			
			<s:TextInput id="groupNameInput"
						 prompt="Enter local path. Optional"
						 text="/"
						 width="300"
						 />
			
			<s:Button id="getAllSettingsButton" 
					  label="Get All Settings" 
					  top="10" left="10"/>
	
			<s:Button id="removeSettingButton" 
					  label="Remove setting" 
					  />
			
		</s:HGroup>
		
		<s:HGroup verticalAlign="baseline" width="100%">
			
			<s:Label id="propertyNameLabel"
					 text="Add New Property:"
					 />
			
			<s:TextInput id="propertyNameInput"
						 prompt="name"
						 />
			
			<s:Button id="addPropertyButton" 
					  label="Add" 
					  top="10" left="10"/>
			
			<s:Spacer width="100%"/>
			
			<s:Label id="groupDoesNotExistLabel"
					 text="Note: No settings exist with the name and path you entered."
					 visible="false"
					 />
		</s:HGroup>
		
		<s:Line width="100%" >
			<s:stroke>
				<s:SolidColorStroke weight="1" color="#555555"/>
			</s:stroke>
			<s:filters>
				<s:DropShadowFilter angle="90" color="#EEEEEE" strength=".5" distance="1" blurX="0" blurY="0"/>
			</s:filters>
		</s:Line>
		
		<s:HGroup width="100%">
			
			
			<s:VGroup width="100%" paddingRight="10">
				
				<s:HGroup verticalAlign="middle" width="100%">
					<s:Label text="Properties"/>
				</s:HGroup>
				<s:List id="settingsList" 
						width="100%"
						borderAlpha=".5"
						minHeight="300"
						dataProvider="{propertiesCollection}"
						>
					<s:itemRenderer>
						<fx:Component>
							<s:ItemRenderer width="100%" height="100%">
								
								<fx:Declarations>
									<handlers:EventHandler target="{removeSettingLabel}" eventName="click">
										<settings:RemoveSetting id="removeSetting" 
																name="{outerDocument.settingNameInput.text}" 
																localPath="{outerDocument.groupNameInput.text}"
																property="{data}" >
											<settings:pendingEffect>
												<status:ShowStatusMessage message="Setting property will be removed"/>
											</settings:pendingEffect>
											<settings:removedEffect>
												<status:ShowStatusMessage message="Setting property was removed"/>
											</settings:removedEffect>
											<settings:errorEffect>
												<status:ShowStatusMessage message="An error occured when attempting to remove the property"
																		  data="{removeSetting.errorEvent}"/>
											</settings:errorEffect>
										</settings:RemoveSetting>
										<core:PlayEffect target="{outerDocument.getAllSettingsSequence}"/>
									</handlers:EventHandler>
								</fx:Declarations>
								
								
								<s:HGroup width="100%" 
										  verticalAlign="middle" 
										  paddingBottom="10" 
										  paddingRight="10"
										  paddingTop="10" 
										  paddingLeft="10">
									
									<s:Label id="labelDisplay" 
											 width="150" 
											 maxDisplayedLines="1"/>
									
									<s:Spacer width="100%"/>
									
									<s:Button id="removeSettingLabel" 
											  label="Remove" />
								</s:HGroup>
								
								
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
				<s:HGroup verticalAlign="middle" width="100%">
				</s:HGroup>
			</s:VGroup>
			
			
			
			<s:VGroup width="100%">
				
				<s:HGroup verticalAlign="middle" width="100%">
					<s:Label text="Value"
							 minWidth="60"
							 />
				</s:HGroup>
				
				<s:TextArea id="settingValueTextarea" 
							width="100%"
							height="300"
							borderAlpha=".5"
							prompt="Value of property"
							>
					
				</s:TextArea>
				
				<s:HGroup verticalAlign="middle" width="100%">
					
					<s:Spacer width="100%"/>
					<s:Button id="updateValueButton" 
							  label="Update Value" 
							  top="10" left="10"/>
				</s:HGroup>
			</s:VGroup>
			
		</s:HGroup>
		
		
		<s:Line width="100%" >
			<s:stroke>
				<s:SolidColorStroke weight="1" color="#555555"/>
			</s:stroke>
			<s:filters>
				<s:DropShadowFilter angle="90" color="#EEEEEE" strength=".5" distance="1" blurX="0" blurY="0"/>
			</s:filters>
		</s:Line>
		
		<s:Label id="moreInfoOnErrorsLabel" 
				 useHandCursor="true"
				 buttonMode="true"
				 text="More information on errors" 
				 color="blue"
				 textDecoration="underline"
				 />
		
	</s:Group>
	
</s:Group>
